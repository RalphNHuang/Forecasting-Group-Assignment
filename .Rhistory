data.frame(cbind(ma_RMSE_train_v,ma_RMSE_test_v),row.names = name_list)
data.frame(cbind(esx_holiday_RMSE_train_v,esx_holiday_RMSE_test_v),row.names = name_list)
data.frame(cbind(esx_snap_RMSE_train_v,esx_snap_RMSE_test_v),row.names = name_list)
data.frame(cbind(arima_RMSE_train_v,arima_RMSE_test_v),row.names = name_list)
data.frame(cbind(arimax_RMSE_train_v,arimax_RMSE_test_v),row.names = name_list)
data.frame(cbind(hw_RMSE_train_v,hw_RMSE_test_v),row.names = name_list)
data.frame(cbind(tbats_RMSE_train_v,tbats_RMSE_test_v),row.names = name_list)
print(naive_crossH_RMSSE)
print(ses_crossH_RMSSE)
print(esx_holiday_crossH_RMSSE)
print(esx_snap_crossH_RMSSE)
print(arima_crossH_RMSSE)
print(arimax_crossH_RMSSE)
print(hw_crossH_RMSSE)
print(tbats_crossH_RMSSE)
# model
print(summary(ma_cat_list[[1]]))
print(summary(cat_ses_list[[1]]))
print(summary(cat_esx_holiday_list[[1]]))
print(summary(cat_esx_snap_list[[1]]))
print(summary(cat_hw_list[[1]]))
print(summary(cat_tbats_list[[1]]))
print(cbind(naive_cat_RMSSE_v
,snaive_cat_RMSSE_v
,ma_cat_RMSSE_v
,cat_ses_RMSSE_v
,cat_esx_holiday_RMSSE_v
,cat_esx_snap_RMSSE_v
,cat_arima_RMSSE_v
,cat_arimax_RMSSE_v
,cat_hw_RMSSE_v
,cat_tbats_RMSSE_v
))
# model
print(summary(ma_week_list[[1]]))
print(summary(week_ses_list[[1]]))
print(summary(ma_week_list[[1]]))
print(summary(week_esx_holiday_list[[1]]))
print(summary(week_esx_snap_list[[1]]))
print(summary(week_hw_list[[1]]))
print(summary(week_tbats_list[[1]]))
print(cbind(naive_week_RMSSE_v
,snaive_week_RMSSE_v
,ma_week_RMSSE_v
,week_ses_RMSSE_v
,week_esx_holiday_RMSSE_v
,week_esx_snap_RMSSE_v
,week_arima_RMSSE_v
,week_arimax_RMSSE_v
,week_hw_RMSSE_v
,week_tbats_RMSSE_v
))
source("./R/utils.R")
source("./R/dataUtils.R")
load('./.RData')
for (i in dir("./RData/")){
path = paste("./RData/", i, sep = "")
load(path)
}
for (i in dir("./1.2.f/")){
path = paste("./1.2.f/", i, sep = "")
load(path)
}
# you can choose to summary different model(by change model_list) with different product(by change [1])
print(summary(ma_list[[1]]))
print(summary(arima_list[[2]]))
print(summary(arimax_list_snap[[3]]))
print(summary(hw_list[[4]]))
print(summary(tbats_list[[5]]))
cbind(naive_RMSSE_v
,snaive_RMSSE_v
,ses_RMSSE_v
,ma_RMSSE_v
,esx_holiday_RMSSE_v
,esx_snap_RMSSE_v
,arima_RMSSE_v
,arimax_snap_RMSSE_v
,hw_RMSSE_v
,tbats_RMSSE_v
)
name_list = names(trainData[,2:19])
data.frame(cbind(naive_RMSE_train_v,naive_RMSE_test_v),row.names = name_list)
data.frame(cbind(snaive_RMSE_train_v,snaive_RMSE_test_v),row.names = name_list)
data.frame(cbind(ses_RMSE_train_v,ses_RMSE_test_v),row.names = name_list)
data.frame(cbind(ma_RMSE_train_v,ma_RMSE_test_v),row.names = name_list)
data.frame(cbind(esx_holiday_RMSE_train_v,esx_holiday_RMSE_test_v),row.names = name_list)
data.frame(cbind(esx_snap_RMSE_train_v,esx_snap_RMSE_test_v),row.names = name_list)
data.frame(cbind(arima_RMSE_train_v,arima_RMSE_test_v),row.names = name_list)
data.frame(cbind(arimax_RMSE_train_v,arimax_RMSE_test_v),row.names = name_list)
data.frame(cbind(hw_RMSE_train_v,hw_RMSE_test_v),row.names = name_list)
data.frame(cbind(tbats_RMSE_train_v,tbats_RMSE_test_v),row.names = name_list)
print(naive_crossH_RMSSE)
print(ses_crossH_RMSSE)
print(esx_holiday_crossH_RMSSE)
print(esx_snap_crossH_RMSSE)
print(arima_crossH_RMSSE)
print(arimax_crossH_RMSSE)
print(hw_crossH_RMSSE)
print(tbats_crossH_RMSSE)
# model
print(summary(ma_cat_list[[1]]))
print(summary(cat_ses_list[[1]]))
print(summary(cat_esx_holiday_list[[1]]))
print(summary(cat_esx_snap_list[[1]]))
print(summary(cat_hw_list[[1]]))
print(summary(cat_tbats_list[[1]]))
print(cbind(naive_cat_RMSSE_v
,snaive_cat_RMSSE_v
,ma_cat_RMSSE_v
,cat_ses_RMSSE_v
,cat_esx_holiday_RMSSE_v
,cat_esx_snap_RMSSE_v
,cat_arima_RMSSE_v
,cat_arimax_RMSSE_v
,cat_hw_RMSSE_v
,cat_tbats_RMSSE_v
))
# model
print(summary(ma_week_list[[1]]))
print(summary(week_ses_list[[1]]))
print(summary(ma_week_list[[1]]))
print(summary(week_esx_holiday_list[[1]]))
print(summary(week_esx_snap_list[[1]]))
print(summary(week_hw_list[[1]]))
print(summary(week_tbats_list[[1]]))
print(cbind(naive_week_RMSSE_v
,snaive_week_RMSSE_v
,ma_week_RMSSE_v
,week_ses_RMSSE_v
,week_esx_holiday_RMSSE_v
,week_esx_snap_RMSSE_v
,week_arima_RMSSE_v
,week_arimax_RMSSE_v
,week_hw_RMSSE_v
,week_tbats_RMSSE_v
))
print(cbind(naive_week_RMSSE_v
,snaive_week_RMSSE_v
,ma_week_RMSSE_v
,week_ses_RMSSE_v
,week_esx_holiday_RMSSE_v
,week_esx_snap_RMSSE_v
,week_hw_RMSSE_v
,week_tbats_RMSSE_v
))
print(naive_crossH_RMSSE)
print(snaive_crossH_RMSSE)
print(ses_crossH_RMSSE)
print(esx_holiday_crossH_RMSSE)
print(esx_snap_crossH_RMSSE)
print(arima_crossH_RMSSE)
print(arimax_crossH_RMSSE)
print(hw_crossH_RMSSE)
print(tbats_crossH_RMSSE)
ses_pred_list
class(ses_pred_list)
ses_pred_list[[1]]
class(ses_pred_list[[1]])
knitr::opts_chunk$set(echo = TRUE)
for (i in 1:18) {
comination_pred_list[i] = (ses_pred_list[[i]] + arima_pred_list[[i]])
print(comination_pred_list)
}
name_list
hybrid_model = hybridModel(trainData[['Hobbies_CA_1']], models = "ae", weights = "equal")
installed.packages('hybridModels')
install.packages('forecastHybrid')
library(forecastHybrid)
install.packages('thief')
install.packages("thief")
library(forecastHybrid)
hybrid_model = hybridModel(trainData[['Hobbies_CA_1']], models = "ae", weights = "equal")
hybrid_model%>%forecast(testData, h = 10)%>%plot()
for (h in 1:28) {
hw_pred_list = lapply(hybrid_model, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData, hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
hybrid_model
summary(hybrid_model)
for (h in 1:28) {
hw_pred_list = lapply(hybrid_model, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData, hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
knitr::opts_chunk$set(echo = TRUE)
forecast.beta(hybrid_model, h=10)
hybrid_RMSSE = forecast.beta(hybrid_model, h=10)
hybrid_RMSSE
hybrid_RMSSE = forecast.beta(hybrid_model, h=10)
eval.RMSSE(testData, hybrid_RMSSE, h=10,1)
hybrid_RMSSE = forecast.beta(hybrid_model, h=10)
hybrid_RMSSE_ = eval.RMSSE(testData, hybrid_RMSSE, h=10,1)
hybrid_RMSSE_
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_model, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData[['Hobbies_CA_1']], hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
hybrid_pred_list
hybrid_pred_list = lapply(hybrid_model, forecast.beta, h = 10)
hybrid_pred = forecast.beta(hybrid_model, h=10)
hybrid_pred
hybrid_pred = forecast.beta(hybrid_model, h=10)
hybrid_RMSSE_ = eval.RMSSE(testData, hybrid_pred, h=10,1)
hybrid_RMSSE_
hybrid_pred = forecast.beta(hybrid_model, h=10)
hybrid_RMSSE = eval.RMSSE(testData[['Hobbies_CA_1']], hybrid_pred, h=10,1)
testData[['Hobbies_CA_1']]
hybrid_pred = forecast.beta(hybrid_model, h=10)
hybrid_RMSSE = eval.RMSSE(testData[['Hobbies_CA_1']], list(hybrid_pred), h=10,1)
hybrid_pred = forecast.beta(hybrid_model, h=10)
hybrid_RMSSE = eval.RMSSE(data.frame(testData[['Hobbies_CA_1']]), list(hybrid_pred), h=10,1)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hw_crossH_RMSSE = data.frame()
for (h in 1:28) {
hw_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData, hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
#重要！导入所有函数，需要tidyverse包
library(tidyverse)
source("./R/utils.R")
source("./R/dataUtils.R")
load("./RData/dataset.RData")
### Dataset splition
rawData = read_csv("./dat/Projectdata.csv")
rawData[,2:ncol(rawData)] = apply(rawData[,2:ncol(rawData)], 2, scale)
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
### Aggregation
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
save(rawData, testAggCat, testAggStore, testAggWeek, testData,
trainAggCat, trainAggStore, trainAggWeek, trainData,
file = "./RData/dataset.RData")
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hw_crossH_RMSSE = data.frame()
for (h in 1:28) {
hw_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData, hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
names(hw_crossH_RMSSE) = names(hw_RMSSE_v)
print(hw_crossH_RMSSE)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
knitr::opts_chunk$set(echo = TRUE)
#重要！导入所有函数，需要tidyverse包
library(tidyverse)
source("./R/utils.R")
source("./R/dataUtils.R")
load("./RData/dataset.RData")
### Dataset splition
rawData = read_csv("./dat/Projectdata.csv")
rawData[,2:ncol(rawData)] = apply(rawData[,2:ncol(rawData)], 2, scale)
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
### Aggregation
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
save(rawData, testAggCat, testAggStore, testAggWeek, testData,
trainAggCat, trainAggStore, trainAggWeek, trainData,
file = "./RData/dataset.RData")
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
ses_crossH_RMSSE = data.frame()
for (h in 1:28) {
ses_pred_list = lapply(ts_list, ses, h=h)
ses_RMSSE_v = eval.RMSSE(testData, ses_pred_list, h = h, devisor = devisors)
ses_crossH_RMSSE = rbind(ses_crossH_RMSSE, ses_RMSSE_v)
}
names(ses_crossH_RMSSE) = names(ses_RMSSE_v)
print(ses_crossH_RMSSE)
install.packages('forecastHybrid')
library(forecastHybrid)
hybrid_model = hybridModel(trainData[['Hobbies_CA_1']], models = "ae", weights = "equal")
hybrid_pred = forecast.beta(hybrid_model, h=10)
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_model, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData[['Hobbies_CA_1']], hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
install.packages("forecastHybrid")
knitr::opts_chunk$set(echo = TRUE)
install.packages('forecastHybrid')
library(forecastHybrid)
hybrid_model = hybridModel(trainData[['Hobbies_CA_1']], models = "ae", weights = "equal")
hybrid_pred = forecast.beta(hybrid_model, h=10)
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_model, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData[['Hobbies_CA_1']], hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
install.packages('forecastHybrid')
library(forecastHybrid)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
hybrid_crossH_RMSSE
knitr::opts_chunk$set(echo = TRUE)
#重要！导入所有函数，需要tidyverse包
library(tidyverse)
source("./R/utils.R")
source("./R/dataUtils.R")
load("./RData/dataset.RData")
### Dataset splition
rawData = read_csv("./dat/Projectdata.csv")
rawData[,2:ncol(rawData)] = apply(rawData[,2:ncol(rawData)], 2, scale)
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
### Aggregation
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
save(rawData, testAggCat, testAggStore, testAggWeek, testData,
trainAggCat, trainAggStore, trainAggWeek, trainData,
file = "./RData/dataset.RData")
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
ses_crossH_RMSSE = data.frame()
for (h in 1:28) {
ses_pred_list = lapply(ts_list, ses, h=h)
ses_RMSSE_v = eval.RMSSE(testData, ses_pred_list, h = h, devisor = devisors)
ses_crossH_RMSSE = rbind(ses_crossH_RMSSE, ses_RMSSE_v)
}
names(ses_crossH_RMSSE) = names(ses_RMSSE_v)
print(ses_crossH_RMSSE)
install.packages('forecastHybrid')
library(forecastHybrid)
hybrid_model = hybridModel(trainData[['Hobbies_CA_1']], models = "ae", weights = "equal")
hybrid_pred = forecast.beta(hybrid_model, h=10)
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_model, forecast.beta, h = h)
hw_RMSSE_v = eval.RMSSE(testData[['Hobbies_CA_1']], hw_pred_list, h = h, devisor = devisors)
hw_crossH_RMSSE = rbind(hw_crossH_RMSSE, hw_RMSSE_v)
}
# install.packages('forecastHybrid')
library(forecastHybrid)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:28) {
hybrid_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
hybrid_crossH_RMSSE
# install.packages('forecastHybrid')
library(forecastHybrid)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:20) {
hybrid_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
# install.packages('forecastHybrid')
library(forecastHybrid)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_pred_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:20) {
hybrid_pred_list = lapply(hybrid_pred_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
# install.packages('forecastHybrid')
library(forecastHybrid)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:20) {
hybrid_pred_list = lapply(hybrid_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
names(hybrid_crossH_RMSSE) = names(hybrid_RMSSE_v)
print(hybrid_crossH_RMSSE)
knitr::opts_chunk$set(echo = TRUE)
#重要！导入所有函数，需要tidyverse包
library(tidyverse)
source("./R/utils.R")
source("./R/dataUtils.R")
load("./RData/dataset.RData")
### Dataset splition
rawData = read_csv("./dat/Projectdata.csv")
rawData[,2:ncol(rawData)] = apply(rawData[,2:ncol(rawData)], 2, scale)
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
### Aggregation
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
save(rawData, testAggCat, testAggStore, testAggWeek, testData,
trainAggCat, trainAggStore, trainAggWeek, trainData,
file = "./RData/dataset.RData")
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
ses_crossH_RMSSE = data.frame()
for (h in 1:28) {
ses_pred_list = lapply(ts_list, ses, h=h)
ses_RMSSE_v = eval.RMSSE(testData, ses_pred_list, h = h, devisor = devisors)
ses_crossH_RMSSE = rbind(ses_crossH_RMSSE, ses_RMSSE_v)
}
names(ses_crossH_RMSSE) = names(ses_RMSSE_v)
print(ses_crossH_RMSSE)
# install.packages('forecastHybrid')
library(forecastHybrid)
ts_list = lapply(trainData[,2:ncol(rawData)], ts)
hybrid_list = lapply(ts_list, hybridModel,models='ae',weights='equal')
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
hybrid_crossH_RMSSE = data.frame()
for (h in 1:20) {
hybrid_pred_list = lapply(hybrid_list, forecast.beta, h = h)
hybrid_RMSSE_v = eval.RMSSE(testData, hybrid_pred_list, h = h, devisor = devisors)
hybrid_crossH_RMSSE = rbind(hybrid_crossH_RMSSE, hybrid_RMSSE_v)
}
names(hybrid_crossH_RMSSE) = names(hybrid_RMSSE_v)
print(hybrid_crossH_RMSSE)
