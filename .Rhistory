plot(stability(var_store_3, type = "Score-MOSUM"))
plot(stability(var_store_3, type = "Rec-CUSUM"))
plot(stability(var_store_3, type = "Rec-MOSUM"))
plot(stability(var_cat_1, type = "Rec-MOSUM"))
summary(var_cat_1)
var_store_2_pred = predict(var_store_2, n.ahead = 1, ci = 0.95)
var_store_3_pred = predict(var_store_3, n.ahead = 1, ci = 0.95)
var_cat_2 = VAR(trainData[,cat_2], type = "none", p = 7)
plot(stability(var_cat_2, type = "RE"))
summary(var_cat_2)
var_cat_3 = VAR(trainData[,cat_3], type = "none", p = 7)
plot(stability(var_cat_3, type = "RE"))
par("mar")
par(mar = c(1, 1, 1, 1))
plot(stability(var_cat_3, type = "OLS-CUSUM"))
summary(var_cat_3)
var_cat_1_pred = predict(var_cat_1, n.ahead = 1, ci = 0.95)
var_cat_2_pred = predict(var_cat_2, n.ahead = 1, ci = 0.95)
var_cat_3_pred = predict(var_cat_3, n.ahead = 1, ci = 0.95)
plot(stability(var_all, type = "OLS-CUSUM"))
var_all_pred = predict(var_all, n.ahead = 1, ci = 0.95)
var_all_pred
pred_list$Hobbies_CA_1
pred_list$Hobbies_CA_1$fitted
library(tidyverse)
pred_list$Hobbies_CA_1$fitted %>% length()
tbats_list$Hobbies_CA_1$errors
tbats_list$Hobbies_CA_1$parameters %>% summary()
tbats_list$Hobbies_CA_1 %>% summary()
save(ts_list, file = "./RData/ralph.RData")
source("./R/utils.R")
source("./R/dataUtils.R")
ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
tbats_list = lapply(ts_list, tbats)
### same as the predicting process
pred_list = lapply(tbats_list, forecast.beta)
### same as the predicting process
tbats_pred_list = lapply(tbats_list, forecast.beta)
### calculate the devisors for RMSSE
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
### calculate the RMSSE for all columns
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
tbats_crossH_RMSSE = data.frame()
for (h in 1:28) {
pred_list = lapply(tbats_list, forecast.beta, h = h)
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, h = h, devisor = devisors)
tbats_crossH_RMSSE = rbind(tbats_crossH_RMSSE, tbats_RMSSE_v)
}
names(tbats_crossH_RMSSE) = names(tbats_RMSSE_v)
cat_ts_list = lapply(trainAggCat[,2:ncol(trainAggCat)], msts.beta)
cat_tbats_list = lapply(cat_ts_list, tbats)
cat_pred_list = lapply(cat_ts_list, forecast.beta)
cat_devisors = unlist(lapply(trainAggCat[,2:ncol(trainAggCat)], cal.devisor))
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, cat_pred_list, devisor = cat_devisors)
# 1.4 aggregate by store
store_ts_list = lapply(trainAggStore[,2:ncol(trainAggStore)], msts.beta)
store_tbats_list = lapply(store_ts_list, tbats)
store_pred_list = lapply(store_ts_list, forecast.beta)
store_devisors = unlist(lapply(trainAggStore[,2:ncol(trainAggStore)], cal.devisor))
store_tbats_RMSSE_v = eval.RMSSE(testAggStore, store_pred_list, devisor = store_devisors)
# 1.5 aggregate by week
week_ts_list = lapply(trainAggWeek[,2:ncol(trainAggWeek)], msts.beta)
week_tbats_list = lapply(week_ts_list, tbats)
week_pred_list = lapply(week_ts_list, forecast.beta, h = 4)
week_devisors = unlist(lapply(trainAggWeek[,2:ncol(trainAggWeek)], cal.devisor))
week_tbats_RMSSE_v = eval.RMSSE(testAggWeek, week_pred_list, h = 4, devisor = week_devisors)
# function to calculate MSE
## 输入：
## pred：预测值
## target：实际值
cal.MSE = function(pred, target){
mse = mean((pred-target)^2, rm.na = T)
return(mse)
}
cal.MSE(pred_list$Hobbies_CA_1$mean, trainData$Hobbies_CA_1)
cal.MSE(pred_list$Hobbies_CA_1$mean, testData$Hobbies_CA_1)
cal.MSE(pred_list$Hobbies_CA_1$fitted, trainData$Hobbies_CA_1)
store_tbats_pred_list = lapply(store_ts_list, forecast.beta)
cat_tbats_pred_list = lapply(cat_ts_list, forecast.beta)
week_tbats_pred_list = lapply(week_ts_list, forecast.beta, h = 4)
#重要！导入所有函数，需要tidyverse包
source("./R/utils.R")
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
}
if(mode=="test"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
}
}
}
tbats_MSE_train_v = eval.MSE(trainData, tbats_pred_list, mode = "train")
tbats_MSE_train_v
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
}
if(mode=="test"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
}
else
cat("please check the mode\n")
}
return(output)
}
tbats_MSE_train_v = eval.MSE(trainData, tbats_pred_list, mode = "train")
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
}
else if(mode=="test"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
}
else
cat("please check the mode\n")
}
return(output)
}
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
return(output)
}
else if(mode=="test"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
return(output)
}
else
cat("please check the mode\n")
}
}
tbats_MSE_train_v = eval.MSE(trainData, tbats_pred_list, mode = "train")
tbats_MSE_train_v
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
return(output)
}
else if(mode=="test"){
output = numeric()
for (i in length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
return(output)
}
else
cat("please check the mode\n")
}
}
tbats_MSE_train_v = eval.MSE(trainData, tbats_pred_list, mode = "train")
tbats_MSE_train_v
i
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
return(output)
}
else if(mode=="test"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.MSE(pred, origin))
}
return(output)
}
else
cat("please check the mode\n")
}
}
tbats_MSE_train_v = eval.MSE(trainData, tbats_pred_list, mode = "train")
tbats_MSE_train_v
tbats_MSE_test_v = eval.MSE(testData, tbats_pred_list, mode = "test")
tbats_MSE_test_v
# function to calculate RMSE
## 输入：
## pred：预测值
## origin：实际值
cal.RMSE = function(pred, origin){
rmse = sqrt(mean((pred-origin)^2, rm.na = T))
return(mse)
}
eval.MSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.RMSE(pred, origin))
}
return(output)
}
else if(mode=="test"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.RMSE(pred, origin))
}
return(output)
}
else
cat("please check the mode\n")
}
}
tbats_RMSE_train_v = eval.MSE(trainData, tbats_pred_list, mode = "train")
tbats_RMSE_test_v = eval.MSE(testData, tbats_pred_list, mode = "test")
tbats_RMSE_train_v = eval.RMSE(trainData, tbats_pred_list, mode = "train")
eval.RMSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.RMSE(pred, origin))
}
return(output)
}
else if(mode=="test"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.RMSE(pred, origin))
}
return(output)
}
else
cat("please check the mode\n")
}
}
tbats_RMSE_train_v = eval.RMSE(trainData, tbats_pred_list, mode = "train")
# function to calculate RMSE
## 输入：
## pred：预测值
## origin：实际值
cal.RMSE = function(pred, origin){
rmse = sqrt(mean((pred-origin)^2, rm.na = T))
return(rmse)
}
eval.RMSE = function(testData, pred_list, mode = "train"){
testData = testData[,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
if(mode=="train"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["fitted"]]
origin = pull(testData, i)
output = c(output, cal.RMSE(pred, origin))
}
return(output)
}
else if(mode=="test"){
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.RMSE(pred, origin))
}
return(output)
}
else
cat("please check the mode\n")
}
}
tbats_RMSE_train_v = eval.RMSE(trainData, tbats_pred_list, mode = "train")
tbats_RMSE_test_v = eval.RMSE(testData, tbats_pred_list, mode = "test")
tbats_RMSE_train_v
tbats_RMSE_test_v
apply(rawData[,2:ncol(rawData)], 2, scale)
source("./R/utils.R")
source("./R/dataUtils.R")
### Dataset splition
rawData = read_csv("./dat/Projectdata.csv")
rawData[,2:ncol(rawData)] = apply(rawData[,2:ncol(rawData)], 2, scale)
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
### Aggregation
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
save(rawData, testAggCat, testAggStore, testAggWeek, testData,
trainAggCat, trainAggStore, trainAggWeek, trainData,
file = "./RData/dataset.RData")
tbats_ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
# ---------------------------------------------------------------------------
# 对于我的tbats模型，没有什么其他参数需要自定义
# 如果大家的模型有别的参数要传，也可以按照我function.beta()来自定义
# ---------------------------------------------------------------------------
tbats_list = lapply(ts_list, tbats)
### same as the predicting process
tbats_pred_list = lapply(tbats_list, forecast.beta)
### calculate the devisors for RMSSE
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
### calculate the RMSSE for all columns (h =28)
tbats_RMSSE_v = eval.RMSSE(testData, tbats_pred_list, devisor = devisors)
### calcualte the MES for both train set and test set
tbats_RMSE_train_v = eval.RMSE(trainData, tbats_pred_list, mode = "train")
tbats_RMSE_test_v = eval.RMSE(testData, tbats_pred_list, mode = "test")
# 1.3 evaluate different h
tbats_crossH_RMSSE = data.frame()
for (h in 1:28) {
pred_list = lapply(tbats_list, forecast.beta, h = h)
tbats_RMSSE_v = eval.RMSSE(testData, tbats_pred_list, h = h, devisor = devisors)
tbats_crossH_RMSSE = rbind(tbats_crossH_RMSSE, tbats_RMSSE_v)
}
names(tbats_crossH_RMSSE) = names(tbats_RMSSE_v)
# 1.4 aggregate by item
cat_ts_list = lapply(trainAggCat[,2:ncol(trainAggCat)], msts.beta)
cat_tbats_list = lapply(cat_ts_list, tbats)
cat_tbats_pred_list = lapply(cat_ts_list, forecast.beta)
cat_devisors = unlist(lapply(trainAggCat[,2:ncol(trainAggCat)], cal.devisor))
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, cat_pred_list, devisor = cat_devisors)
# 1.4 aggregate by store
store_ts_list = lapply(trainAggStore[,2:ncol(trainAggStore)], msts.beta)
store_tbats_list = lapply(store_ts_list, tbats)
store_tbats_pred_list = lapply(store_ts_list, forecast.beta)
store_devisors = unlist(lapply(trainAggStore[,2:ncol(trainAggStore)], cal.devisor))
store_tbats_RMSSE_v = eval.RMSSE(testAggStore, store_pred_list, devisor = store_devisors)
# 1.5 aggregate by week
week_ts_list = lapply(trainAggWeek[,2:ncol(trainAggWeek)], msts.beta)
week_tbats_list = lapply(week_ts_list, tbats)
week_tbats_pred_list = lapply(week_ts_list, forecast.beta, h = 4)
week_devisors = unlist(lapply(trainAggWeek[,2:ncol(trainAggWeek)], cal.devisor))
week_tbats_RMSSE_v = eval.RMSSE(testAggWeek, week_pred_list, h = 4, devisor = week_devisors)
store_ts_list = lapply(trainAggStore[,2:ncol(trainAggStore)], msts.beta)
store_tbats_pred_list = lapply(store_ts_list, forecast.beta)
store_tbats_pred_list
ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
# ---------------------------------------------------------------------------
# 对于我的tbats模型，没有什么其他参数需要自定义
# 如果大家的模型有别的参数要传，也可以按照我function.beta()来自定义
# ---------------------------------------------------------------------------
tbats_list = lapply(ts_list, tbats)
### same as the predicting process
tbats_pred_list = lapply(tbats_list, forecast.beta)
### calculate the devisors for RMSSE
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
### calculate the RMSSE for all columns (h =28)
tbats_RMSSE_v = eval.RMSSE(testData, tbats_pred_list, devisor = devisors)
### calcualte the MES for both train set and test set
tbats_RMSE_train_v = eval.RMSE(trainData, tbats_pred_list, mode = "train")
tbats_RMSE_test_v = eval.RMSE(testData, tbats_pred_list, mode = "test")
# 1.3 evaluate different h
tbats_crossH_RMSSE = data.frame()
for (h in 1:28) {
pred_list = lapply(tbats_list, forecast.beta, h = h)
tbats_RMSSE_v = eval.RMSSE(testData, tbats_pred_list, h = h, devisor = devisors)
tbats_crossH_RMSSE = rbind(tbats_crossH_RMSSE, tbats_RMSSE_v)
}
names(tbats_crossH_RMSSE) = names(tbats_RMSSE_v)
# 1.4 aggregate by item
cat_ts_list = lapply(trainAggCat[,2:ncol(trainAggCat)], msts.beta)
cat_tbats_list = lapply(cat_ts_list, tbats)
cat_tbats_pred_list = lapply(cat_tbats_list, forecast.beta)
cat_devisors = unlist(lapply(trainAggCat[,2:ncol(trainAggCat)], cal.devisor))
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, cat_pred_list, devisor = cat_devisors)
# 1.4 aggregate by store
store_ts_list = lapply(trainAggStore[,2:ncol(trainAggStore)], msts.beta)
store_tbats_list = lapply(store_ts_list, tbats)
store_tbats_pred_list = lapply(store_tbats_list, forecast.beta)
store_devisors = unlist(lapply(trainAggStore[,2:ncol(trainAggStore)], cal.devisor))
store_tbats_RMSSE_v = eval.RMSSE(testAggStore, store_pred_list, devisor = store_devisors)
# 1.5 aggregate by week
week_ts_list = lapply(trainAggWeek[,2:ncol(trainAggWeek)], msts.beta)
week_tbats_list = lapply(week_ts_list, tbats)
week_tbats_pred_list = lapply(week_tbats_list, forecast.beta, h = 4)
week_devisors = unlist(lapply(trainAggWeek[,2:ncol(trainAggWeek)], cal.devisor))
week_tbats_RMSSE_v = eval.RMSSE(testAggWeek, week_pred_list, h = 4, devisor = week_devisors)
tbats_crossH_RMSSE
h
eval.RMSSE(testData, tbats_pred_list, h = h, devisor = devisors)
tbats_crossH_RMSSE = data.frame()
lapply(tbats_list, forecast.beta, h = 1)
eval.RMSSE(testData, tbats_pred_list, h = 1, devisor = devisors)
eval.RMSSE(testData, tbats_pred_list, h = h, devisor = devisors)
eval.RMSSE(testData, tbats_pred_list, h = 27, devisor = devisors)
eval.RMSSE = function(testData, pred_list, h = 28, devisors){
testData = testData[1:h,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list\n")
else{
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.RMSSE(pred, origin, devisors[i]))
}
return(output)
}
}
eval.RMSSE(testData, tbats_pred_list, h = 27, devisor = devisors)
tbats_crossH_RMSSE = data.frame()
for (h in 1:28) {
pred_list = lapply(tbats_list, forecast.beta, h = h)
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, h = h, devisor = devisors)
tbats_crossH_RMSSE = rbind(tbats_crossH_RMSSE, tbats_RMSSE_v)
}
names(tbats_crossH_RMSSE) = names(tbats_RMSSE_v)
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, cat_tbats_pred_list, devisor = cat_devisors)
week_tbats_RMSSE_v = eval.RMSSE(testAggWeek, week_tbats_pred_list, h = 4, devisor = week_devisors)
tbats_RMSE_train_v
tbats_RMSE_test_v
save(ts_list, tbats_list, tbats_pred_list,
tbats_RMSSE_v, tbats_RMSE_train_v, tbats_RMSE_test_v,
tbats_crossH_RMSSE,
cat_ts_list, cat_tbats_list, cat_tbats_pred_list, cat_tbats_RMSSE_v,
store_ts_list, store_tbats_list, store_tbats_pred_list, store_tbats_RMSSE_v,
week_ts_list, week_tbats_list, week_tbats_pred_list, week_tbats_RMSSE_v,
file = "./RData/tbats.RData")
store_tbats_RMSSE_v = eval.RMSSE(testAggStore, store_tbats_pred_list, devisor = store_devisors)
week_tbats_RMSSE_v = eval.RMSSE(testAggWeek, week_tbats_pred_list, h = 4, devisor = week_devisors)
save(ts_list, tbats_list, tbats_pred_list,
tbats_RMSSE_v, tbats_RMSE_train_v, tbats_RMSE_test_v,
tbats_crossH_RMSSE,
cat_ts_list, cat_tbats_list, cat_tbats_pred_list, cat_tbats_RMSSE_v,
store_ts_list, store_tbats_list, store_tbats_pred_list, store_tbats_RMSSE_v,
week_ts_list, week_tbats_list, week_tbats_pred_list, week_tbats_RMSSE_v,
file = "./RData/tbats.RData")
load("./RData/dataset.RData")
