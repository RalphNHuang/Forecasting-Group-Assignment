col_raw = read_csv("./Projectdata.csv")
View(col_raw)
acf(hobby_1 = col_raw$Hobbies_CA_1)
acf(col_raw$Hobbies_CA_1)
par(mfrow=c(3,2))
acf(col_raw$Hobbies_CA_1)
pacf(col_raw$Hobbies_CA_1)
acf(col_raw$Hobbies_CA_3)
pacf(col_raw$Hobbies_CA_3)
acf(col_raw$Hobbies_CA_3)
pacf(col_raw$Hobbies_CA_3)
knitr::opts_chunk$set(echo = TRUE)
col_raw = read_csv("./dat/Projectdata.csv")
library(tidyverse)
col_raw = read_csv("./dat/Projectdata.csv")
install.packages("tseries")
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
adf.test(rawData$Hobbies_CA_1)
library(tidyverse)
rawData = read_csv("./dat/Projectdata.csv")
library(tseries)
adf.test(rawData$Hobbies_CA_1)
adf.test(rawData$Hobbies_CA_2)
library(tseries)
adf.test(rawData$Hobbies_CA_1)
adf.test(rawData$Hobbies_CA_2)
colnames(rawData)
par(mfrow=c(3,2))
acf(rawData$Hobbies_CA_1)
pacf(rawData$Hobbies_CA_1)
acf(rawData$Hobbies_CA_2)
pacf(rawData$Hobbies_CA_2)
acf(rawData$Hobbies_CA_3)
pacf(rawData$Hobbies_CA_3)
par(mfrow=c(3,2))
acf(rawData$Household_1_CA_1)
pacf(rawData$Household_1_CA_1)
acf(rawData$Household_1_CA_2)
pacf(rawData$Household_1_CA_2)
acf(rawData$Household_1_CA_3)
pacf(rawData$Household_1_CA_3)
par(mfrow=c(3,2))
acf(rawData$Household_2_CA_1)
pacf(rawData$Household_2_CA_1)
acf(rawData$Household_2_CA_2)
pacf(rawData$Household_2_CA_2)
acf(rawData$Household_2_CA_3)
pacf(rawData$Household_2_CA_3)
par(mfrow=c(3,2))
acf(rawData$Foods_1_CA_1)
pacf(rawData$Foods_1_CA_1)
acf(rawData$Foods_1_CA_2)
pacf(rawData$Foods_1_CA_2)
acf(rawData$Foods_1_CA_3)
pacf(rawData$Foods_1_CA_3)
par(mfrow=c(3,2))
acf(rawData$Foods_2_CA_1)
pacf(rawData$Foods_2_CA_1)
acf(rawData$Foods_2_CA_2)
pacf(rawData$Foods_2_CA_2)
acf(rawData$Foods_2_CA_3)
pacf(rawData$Foods_2_CA_3)
par(mfrow=c(3,2))
acf(rawData$Foods_3_CA_1)
pacf(rawData$Foods_3_CA_1)
acf(rawData$Foods_3_CA_2)
pacf(rawData$Foods_3_CA_2)
acf(rawData$Foods_3_CA_3)
pacf(rawData$Foods_3_CA_3)
library(tseries)
adf.test(rawData$Hobbies_CA_1)
adf.test(rawData$Hobbies_CA_2)
adf.test(rawData$Hobbies_CA_3)
library(tseries)
adf.test(rawData$Household_1_CA_1)
adf.test(rawData$Household_1_CA_2)
adf.test(rawData$Household_1_CA_3)
<<<<<<< Updated upstream
install.packages("TBATS")
install.packages("forecast")
library(forecast)
View(rawData)
library(tidyverse)
rawData$date %>% as.POSIXct.Date()
nrow(rawData)-28
### Dataset splition
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
rawData$date[1]
as.POSIXct.Date(rawData$date[1])
as.POSIXct.Date(rawData$date[1]) %>% year()
hobby_ts_1 = ts(trainData$Hobbies_CA_1, start = 1)
plot(hobby_ts_1)
tbats_hobby_1 = tbats(hobby_ts_1)
predict(tbats_hobby_1)
tbats_hobby_1_pred = forecast(tbats_hobby_1, level = c(95), h = 28)
plot(tbats_hobby_1_pred)
tbats_hobby_1_pred
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1, ts.frequency = c(7,30.4, 365.25))
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1, seasonal.periods =  = c(7,30.4, 365.25))
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1, seasonal.periods = c(7,30.4, 365.25))
plot(hobby_ts_1)
tbats_hobby_1 = tbats(hobby_ts_1)
tbats_hobby_1_pred = forecast(tbats_hobby_1, level = c(95), h = 28)
plot(tbats_hobby_1_pred)
tbats_hobby_1_pred
tbats_hobby_1_pred$fitted
tbats_hobby_1_pred$fitted[1942:1969]
tbats_hobby_1_pred$series
tbats_hobby_1_pred$fitted %>% length()
tbats_hobby_1_pred$upper
tbats_hobby_1_pred$method
tbats_hobby_1_pred$mean
c(1,2)^2
cal.devisor = function(ts_vector){
tmp = ts_vector[2:length(ts_vector)]-ts_vector[1:(length(ts_vector)-1)]
output = sum(tmp^2)/(length(ts_vector)-1)
return(output)
}
cal.RMSSE = function(pred, origin, devisor){
if(length(pred) != length(origin)){
cat("lengthError: please keep the length of pred and the length of origin consistent")
}
else{
output = sqrt(sum((pred - origin)^2)/(devisor*length(pred)))
return(output)
}
}
cal.RMSSE(tbats_hobby_1_pred$mean, testData$Hobbies_CA_1, cal.devisor(trainData$Hobbies_CA_1))
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1)
hobby_ts_1 = ts(trainData$Hobbies_CA_1, start = 1)
plot(hobby_ts_1)
tbats_hobby_1 = tbats(hobby_ts_1)
tbats_hobby_1_pred = forecast(tbats_hobby_1, level = c(95), h = 28)
plot(tbats_hobby_1_pred)
tbats_hobby_1_pred$mean
cal.RMSSE(tbats_hobby_1_pred$mean, testData$Hobbies_CA_1, cal.devisor(trainData$Hobbies_CA_1))
msts.beta = function(column){
output = msts(column, start = 1, seasonal.periods = c(7, 30.4, 365.25))
return(output)
}
ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
tbats_list = lapply(ts_list, tbats)
forecast.beta = function(model, h = 28){
pred = forecast(model, level = c(95), h = h)
return(pred)
}
pred_list = lapply(tbats_list, forecast.beta)
library(forecast)
library(tidyverse)
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1)
hobby_ts_1 = ts(trainData$Hobbies_CA_1, start = 1)
plot(hobby_ts_1)
tbats_hobby_1 = tbats(hobby_ts_1)
tbats_hobby_1_pred = forecast(tbats_hobby_1, level = c(95), h = 28)
plot(tbats_hobby_1_pred)
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1, seasonal.periods = c(7,30.4, 365.25))
plot(hobby_ts_1)
tbats_hobby_1 = tbats(hobby_ts_1)
tbats_hobby_1_pred = forecast(tbats_hobby_1, level = c(95), h = 28)
plot(tbats_hobby_1_pred)
msts.beta = function(column){
output = msts(column, start = 1, seasonal.periods = c(7, 30.4, 365.25))
return(output)
}
ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
tbats_list = lapply(ts_list, tbats)
forecast.beta = function(model, h = 28){
pred = forecast(model, level = c(95), h = h)
return(pred)
}
# same as the predicting process
pred_list = lapply(tbats_list, forecast.beta)
View(testData)
1:1
library(forecast)
library(tidyverse)
names(pred_list)
pred_list[[1]][["mean"]]
eval.RMSSE = function(testData, pred_list, h = 28, devisor){
testData = testData[1:h,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list")
else{
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = testData[,i]
output = c(output, cal.RMSSE(pred, origin, devisor))
}
return(output)
}
}
## 输入:
## ts_vector: 训练集数据
cal.devisor = function(ts_vector){
tmp = ts_vector[2:length(ts_vector)]-ts_vector[1:(length(ts_vector)-1)]
output = sum(tmp^2)/(length(ts_vector)-1)
return(output)
}
## 输入：
## pred: 测试集预测值
## origin: 测试集真实值
## devisor: RMSSE的分母，由cal.devisor()计算得到
cal.RMSSE = function(pred, origin, devisor){
if(length(pred) != length(origin)){
cat("lengthError: please keep the length of pred and the length of origin consistent")
}
else{
output = sqrt(sum((pred - origin)^2)/(devisor*length(pred)))
return(output)
}
}
lapply(trainData[,2:ncol(trainData)], cal.devisor)
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
eval.RMSSE(testData, pred_list, devisor = devisors)
i
i = 1
pred_list[[i]][["mean"]]
devisors[i]
testData[,i]
i = 2
cal.RMSSE(pred_list[[i]][["mean"]], testData[,i], devisors[i])
testData[,i]
as.numeric()
as.numeric(testData[,i])
as.vector(testData[,i])
collect(testData)[,i]
pull(testData, i)
eval.RMSSE = function(testData, pred_list, h = 28, devisors){
testData = testData[1:h,2:ncol(testData)]
if(names(testData)!=names(pred_list))
cat("Please rearrange the pred_list")
else{
output = numeric()
for (i in 1:length(pred_list)) {
pred = pred_list[[i]][["mean"]]
origin = pull(testData, i)
output = c(output, cal.RMSSE(pred, origin, devisors[i]))
}
return(output)
}
}
eval.RMSSE(testData, pred_list, devisor = devisors)
names(testData)
getwd()
library(tidyverse)
data = rawData
data %>%
pivot_longer(cols = colnames(data)[2:ncol(data)],
names_to = "category", values_to = "sales")
data = data %>%
pivot_longer(cols = colnames(data)[2:ncol(data)],
names_to = "category", values_to = "sales")
str_sub(data$category, 1, 3)
data$category = str_sub(data$category, 1, 3)
mapping = data.frame(category = c("Hob", "Foo", "Hou"),
mapCat = c("Hobbies", "Foods", "Household"))
data %>%
left_join(mapping)
data %>%
left_join(mapping) %>%
select(date, mapCat, sales) %>%
group_by(date, mapCat) %>%
summarise(sales = sum(sales)) %>%
ungroup() %>%
pivot_wider(names_from = mapCat, values_from = sales)
data %>%
left_join(mapping) %>%
select(date, mapCat, sales) %>%
group_by(date, mapCat) %>%
summarise(sales = sum(sales)) %>%
ungroup() %>%
pivot_wider(names_from = mapCat, values_from = sales) %>%
order_by(date)
data %>%
left_join(mapping) %>%
select(date, mapCat, sales) %>%
group_by(date, mapCat) %>%
summarise(sales = sum(sales)) %>%
ungroup() %>%
pivot_wider(names_from = mapCat, values_from = sales) %>%
arrange(date)
data = data %>%
left_join(mapping) %>%
select(date, mapCat, sales) %>%
group_by(date, mapCat) %>%
summarise(sales = sum(sales)) %>%
ungroup() %>%
pivot_wider(names_from = mapCat, values_from = sales) %>%
arrange(date)
View(data)
source("./R/dataUtils.R")
### Aggregation
trainDataAgg = agg_by_cat(trainData)
View(trainDataAgg)
rm(data)
source("./R/dataUtils.R")
### Aggregation
trainDataAgg = agg_by_cat(trainData)
View(trainDataAgg)
1969/7
1967/7
# by week
calendar = read_csv("./M5 raw data/calendar.csv")
View(calendar)
calendar_week = select(calendar, date, weekday)
View(calendar)
View(calendar_week)
View(calendar)
rm(calendar, calendar_week)
1941%7
1941%%7
rep(1:5, 7)
rep(1:5, each = 7)
testData %>% select(!"date")
data = rawData
s = nrow(data)%%7
d = (nrow(data)-s)/7
col = colnames(data)[2:ncol(data)]
data[(1+s):nrow(data),] %>%
mutate(week = rep(c(1:d), each = 7)) %>%
select(!"date")
data[(1+s):nrow(data),] %>%
mutate(week = rep(c(1:d), each = 7)) %>%
select(!"date") %>%
group_by(week) %>%
summarise_each(.vars = col, .funs = c(sum="sum")) %>%
ungroup() %>%
arrange(week)
View(trainData)
paste0("w_",c(1:d))
data = data[(1+s):nrow(data),] %>%
mutate(week = rep(paste0("w_",c(1:d)), each = 7)) %>%
select(!"date") %>%
group_by(week) %>%
summarise(across(where(is.numeric), sum, na.rm = T)) %>%
ungroup() %>%
arrange(week)
View(data)
data$week %>%
str_remove_all("w_") %>%
as.numeric()
data = rawData
s = nrow(data)%%7
d = (nrow(data)-s)/7
col = colnames(data)[2:ncol(data)]
data = data[(1+s):nrow(data),] %>%
mutate(week = rep(paste0("w_",c(1:d)), each = 7)) %>%
select(!"date") %>%
group_by(week) %>%
summarise(across(where(is.numeric), sum, na.rm = T)) %>%
ungroup()
data$week = data$week %>%
str_remove_all("w_") %>%
as.numeric()
data = data %>%
arrange(week)
View(data)
rm(trainDataAgg)
source("./R/dataUtils.R")
testAggWeek = agg_by_week(testData)
# by week
trainAggWeek = agg_by_week(trainData)
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
install.packages("vars")
data = trainData
library(tidyverse)
str_sub(colnames(data)[2:ncol(data)], -1, -1)
str_sub(colnames(data)[2:ncol(data)], -3, -1)
str_sub(colnames(data)[2:ncol(data)], -4, -1)
data = data %>%
pivot_longer(cols = colnames(data)[2:ncol(data)],
names_to = "category", values_to = "sales")
data$category = str_sub(data$category, -4, -1)
data = data %>%
#left_join(mapping) %>%
select(date, category, sales) %>%
group_by(date, category) %>%
summarise(sales = sum(sales)) %>%
ungroup() %>%
pivot_wider(names_from = category, values_from = sales) %>%
arrange(date)# %>%
View(data)
source("./R/dataUtils.R")
# by store
trainAggStore = agg_by_store(trainData)
testAggStore = agg_by_store(testData)
library(vars)
VARselect(trainAggStore[2:ncol(trainAggStore)])
VARselect(trainAggStore[,2:ncol(trainAggStore)])
VARselect(trainAggCat[,2:ncol(trainAggCat)])
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 20)
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 20)
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 30)
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 30)
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 30, type = "both")
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 30, type = "both")
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 30, type = "trend")
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 30, type = "trend")
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 30, type = "const")
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 30, type = "const")
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 50, type = "const")
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 50, type = "const")
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 50, type = "const")$selection
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 50, type = "const")$selection
# How many lag we should use
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 50, type = "none")$selection
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 50, type = "none")$selection
# How many lag we should use
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 50, type = "both")$selection
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 50, type = "both")$selection
# How many lag we should use
VARselect(trainAggStore[,2:ncol(trainAggStore)], lag.max = 50, type = "none")$selection
VARselect(trainAggCat[,2:ncol(trainAggCat)], lag.max = 50, type = "none")$selection
VARselect(trainData[,2:ncol(testData)], lag.max = 50, type = "none")$selection
var_store = var(trainAggStore[,2:ncol(trainAggStore)],
type = "none", p = 14)
var_store = VAR(trainAggStore[,2:ncol(trainAggStore)],
type = "none", p = 14)
summary(var_store)
var_store = VAR(trainAggStore[,2:ncol(trainAggStore)],
type = "none", p = 7)
summary(var_store)
var_store = VAR(trainAggStore[,2:ncol(trainAggStore)],
type = "none", p = 1)
summary(var_store)
var_cat = VAR(trainAggCat[,2:ncol(trainAggCat)],
type = "none", p = 14)
summary(var_cat)
var_all = VAR(trainData[,2:ncol(trainData)],
type = "none", p = 14)
summary(var_all)
var_all = VAR(trainData[,2:ncol(trainData)],
type = "none", p = 7)
library(vars)
var_all = VAR(trainData[,2:ncol(trainData)],
type = "none", p = 7)
summary(var_all)
rm(data)
tbats_RMSSE_v
### calculate the RMSSE for all columns
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
devisors
library(tidyverse)
library(forecast)
### calculate the RMSSE for all columns
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
tbats_RMSSE_v
lapply(tbats_list, forecast.beta, h = 1)
lapply(tbats_list, forecast.beta, h = 1)[[1]]$mean
tbats_crossH_df = data.frame()
for (h in 1:28) {
pred_list = lapply(tbats_list, forecast.beta, h = h)
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, h = h, devisor = devisors)
tbats_crossH_df = rbind(tbats_crossH_df)
}
rm(tbats_crossH_df)
tbats_crossH_RMSSE = data.frame()
for (h in 1:28) {
pred_list = lapply(tbats_list, forecast.beta, h = h)
tbats_RMSSE_v = eval.RMSSE(testData, pred_list, h = h, devisor = devisors)
tbats_crossH_RMSSE = rbind(tbats_crossH_RMSSE, tbats_RMSSE_v)
}
View(tbats_crossH_RMSSE)
names(tbats_crossH_RMSSE) = names(tbats_RMSSE_v)
View(tbats_crossH_RMSSE)
cat_ts_list = lapply(trainAggCat[,2:ncol(trainAggCat)], msts.beta)
cat_tbats_list = lapply(cat_ts_list, tbats)
cat_pred_list = lapply(cat_ts_list, forecast.beta)
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, pred_list, devisor = devisors)
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, cat_pred_list, devisor = devisors)
cat_tbats_RMSSE_v
View(testAggCat)
cat_pred_list
cat_devisors = unlist(lapply(trainAggCat[,2:ncol(trainAggCat)], cal.devisor))
cat_tbats_RMSSE_v = eval.RMSSE(testAggCat, cat_pred_list, devisor = cat_devisors)
cat_tbats_RMSSE_v
store_ts_list = lapply(trainAggStore[,2:ncol(trainAggStore)], msts.beta)
store_tbats_list = lapply(store_ts_list, tbats)
store_pred_list = lapply(store_ts_list, forecast.beta)
store_devisors = unlist(lapply(trainAggStore[,2:ncol(trainAggStore)], cal.devisor))
store_tbats_RMSSE_v = eval.RMSSE(testAggstore, store_pred_list, devisor = store_devisors)
store_tbats_RMSSE_v = eval.RMSSE(testAggStore, store_pred_list, devisor = store_devisors)
store_tbats_RMSSE_v
week_ts_list = lapply(trainAggWeek[,2:ncol(trainAggWeek)], msts.beta)
week_tbats_list = lapply(week_ts_list, tbats)
week_pred_list = lapply(week_ts_list, forecast.beta, h = 4)
week_devisors = unlist(lapply(trainAggWeek[,2:ncol(trainAggWeek)], cal.devisor))
week_tbats_RMSSE_v = eval.RMSSE(testAggWeek, week_pred_list, h = 4, devisor = week_devisors)
week_tbats_RMSSE_v
library(vars)
stability(trainAggStore[,2:ncol(trainAggStore)], type = "OLS-CUSUM")
stability(as.matrix(trainAggStore[,2:ncol(trainAggStore)]), type = "OLS-CUSUM")
class(var_cat)
stability(var_store, type = "OLS-CUSUM")
var_store_sta = stability(var_store, type = "OLS-CUSUM")
var_store_sta
polt(stability(var_store, type = "OLS-CUSUM"))
plot(stability(var_store, type = "OLS-CUSUM"))
plot(stability(var_cat, type = "OLS-CUSUM"))
plot(stability(var_all, type = "OLS-CUSUM"))
summary(stability(var_all, type = "OLS-CUSUM"))
par("mar")
par(mar = c(1,1,1,1))
plot(stability(var_all, type = "OLS-CUSUM"))
plot(stability(var_store, type = "OLS-CUSUM"))
diff(trainAggStore$CA_1)
diff(trainAggStore$CA_1) %>% length()
=======
View(rawData)
load("D:/法国学习/第一学期/forecasting/Forecasting-Group-Assignment/.RData")
View(rawData)
attributes(rowData)
Projectdata <- read.csv("Projectdata.csv")
load("D:/法国学习/第一学期/forecasting/Forecasting-Group-Assignment/.RData")
attributes(Rdata)
library(readr)
Projectdata <- read_csv("D:/法国学习/第一学期/forecasting/Forecasting-Group-Assignment/dat/Projectdata.csv")
View(Projectdata)
#Projectdata <- read.csv("Projectdata.csv")
attributes(Projectdatadata)
#Projectdata <- read.csv("Projectdata.csv")
attributes(Projectdata)
attributes(Projectdata)
library(tidyverse)
library(readr)
library(zoo)
library(forecast)
library(dplyr)
source("./R/utils.R")
source("./R/dataUtils.R")
### Dataset splition
rawData = read.csv("./dat/Projectdata.csv")
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
arima_list = lapply(ts_list, auto.arima)
pred_list = lapply(arima_list, forecast.beta)
### calculate the devisors for RMSSE
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
### calculate the RMSSE for all columns
arima_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
View(ts_list)
View(ts_list)
View(ts_list)
arima_RMSSE_v
View(eval.RMSSE)
arima_list
save(arima_list, file="./arimalist/lst.RData")
save(arima_RMSSE_v, file="./arimalist/RMSSE.RData")
# by categories
trainAggCat = agg_by_cat(trainData)
testData
### Dataset splition
rawData = read.csv("./dat/Projectdata.csv")
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
# by categories
trainAggCat = agg_by_cat(trainData)
testAggCat = agg_by_cat(testData)
# by week
trainAggWeek = agg_by_week(trainData)
testAggWeek = agg_by_week(testData)
plot(pred_list)
autoplot(pred_list)
autoplot(pred_list[1:2])
plot(pred_list[1:2])
plot(pred_list[1],pred_list[2],'data','hobbies')
plot(pred_list[1],pred_list[2],'data','hobbies')%.%
mutate(pred_list[1]=as.Date(pred_list[1]))
plot(pred_list[1],pred_list[2],'data','hobbies')%.%
mutate(as.Date(pred_list[1]))
plot(pred_list[1],pred_list[2],'data','hobbies')%.%
mutate(date = as.Date(date))
View(pred_list)
plot(pred_list[["Household_1_CA_1"]])
plot(pred_list[["Household_1_CA_1"]])
View(arima_list)
View(arima_list)
View(arima_list)
View(agg_by_cat)
View(agg_by_cat)
###predict sales of items aggregated by catogories
pred_list = lapply(testAggCat, forecast.beta)
View(msts.beta)
ts.beta = function(column){
output = ts(column,start = 1, frequency = 365.25)
return(output)
}
View(forecast.beta)
View(forecast.beta)
ts365_list = lapply(trainData[,2:ncol(rawData)], ts.beta)
temp = rnorm(length(ts365_list), 0, 10)
temp = rnorm(length(ts365_list), 5, 5)
temp = rnorm(length(ts365_list), 5, 1)
temp = rnorm(length(ts365_list), 10, 5)
model = auto.arima(ts365_list, xreg = data.frame(temp = temp))
arimax_list = lapply(ts365_list, auto.arima(xreg = data.frame(temp)))
model = auto.arima(ts365_list, xreg = data.frame(temp))
arimax_list = lapply(ts365_list, auto.arima(xreg = data.frame(temp = temp)))
View(ts365_list)
xreg = as.vector(temp)
arimax_list = lapply(ts365_list, auto.arima(xreg))
model = auto.arima(ts365_list, xreg)
arimax_list = lapply(ts365_list, auto.arima(,xreg))
return(output)
auto.arima.beta = function(column){
output = auto.arima(column,xreg)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
temp = as.vector(temp)
auto.arima.beta = function(column){
output = auto.arima(column,xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
temp = rnorm(1969, 10, 5)
temp = as.vector(temp)
auto.arima.beta = function(column){
output = auto.arima(column,xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
xreg = as.vector(temp)
auto.arima.beta = function(column){
output = auto.arima(column,xreg)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column,xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column,xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
temp = rnorm(length(ts365_list), 10, 5)
temp = as.vector(temp)
auto.arima.beta = function(column){
output = auto.arima(column,xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
xreg = as.vector(temp)
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column, stepwise=FALSE,approx=FALSE, xreg=temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column, stepwise=FALSE,approx=FALSE, xregg=temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
hobby_ts_1 = msts(trainData$Hobbies_CA_1, start = 1, seasonal.periods = c(7, 30.4, 365.25))
auto.arima(hobby_ts_1,xreg = length(hobby_ts_1))
auto.arima(hobby_ts_1,xreg = rnorm(length(hobby_ts_1))
auto.arima(hobby_ts_1,xreg = rnorm(length(hobby_ts_1)))
auto.arima(hobby_ts_1,xreg = temp)
temp = rnorm(length(hobby_ts_1), 10, 5)
auto.arima(hobby_ts_1,xreg = temp)
temp.beta = function(column){
output = rnorm(length(column),10,5)
return(output)
}
auto.arima.beta = function(column){
output = auto.arima(column, xreg=temp.beta)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column, xreg)
return(output)
arimax_list = lapply(ts365_list, auto.arima.beta)
arimax_list = lapply(ts365_list, auto.arima.beta)
pred_list = lapply(arimax_list, forecast.beta)
arimax_list
arimax_list
arimax_list = lapply(ts365_list, auto.arima.beta)
arimax_list
temp = rnorm(length(ts365_list),10,5)
arimax_list = lapply(ts365_list, auto.arima.beta)
library(tidyverse)
library(readr)
library(zoo)
library(forecast)
library(dplyr)
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column, xreg)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
arimax_list = auto.arima(ts365_list,xreg)
arimax_list = auto.arima(ts365_list,xreg = unlist(xreg))
arimax_list = auto.arima(unlist(ts365_list),xreg)
temp = rnorm(length(ts365_list),10,5)
arimax_list = auto.arima(unlist(ts365_list),xreg = temp)
arimax_list = auto.arima(ts365_list,xreg = temp)
arimax_list = lapply(ts365_list, auto.arima.beta)
auto.arima.beta = function(column){
output = auto.arima(column, xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
xreg
ts365_list
View(ts365_list)
temp
temp = rnorm(1941,10,5)
auto.arima.beta = function(column){
output = auto.arima(column, xreg = temp)
return(output)
}
arimax_list = lapply(ts365_list, auto.arima.beta)
View(arimax_list)
View(arima_list)
View(arimax_list)
View(arima_list)
save(temp, file="./arimaxlist/X.RData")
save(arimax_list, file="./arimaxlist/arimaxlist.RData")
predx_list = lapply(arimax_list, forecast.beta)
###random regressors
temp.reg = data.frame(temp = rnorm(10, 10, 5))
forecastx.beta = function(model, h = 28){
output = forecast(model, level = c(95), h = h, xreg = temp.reg)
return(output)
}
predx_list = lapply(arimax_list, forecastx.beta)
###random regressors
temp.reg = rnorm(10, 10, 5))
forecastx.beta = function(model, h = 28){
output = forecast(model, level = c(95), h = h, xreg = temp.reg)
return(output)
}
predx_list = lapply(arimax_list, forecastx.beta)
###random regressors
temp.reg = rnorm(10, 10, 5)
forecastx.beta = function(model, h = 28){
output = forecast(model, level = c(95), h = h, xreg = temp.reg)
return(output)
}
predx_list = lapply(arimax_list, forecastx.beta)
View(predx_list)
View(pred_list)
save(temp.reg, file="./arimaxlist/regressor.RData")
arimax_RMSSE_v = eval.RMSSE(testData, predx_list, devisor = devisors)
View(testData)
arimax_RMSSE_v = eval.RMSSE(testData, predx_list, devisor = devisors)
plot(predx_list)
View(arima_list)
plot(pred_list)
arimax_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
### calculate the RMSSE for all columns
arima_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
library(tidyverse)
library(readr)
library(zoo)
library(forecast)
library(dplyr)
source("./R/utils.R")
source("./R/dataUtils.R")
arimax_RMSSE_v = eval.RMSSE(testData, predx_list, devisor = devisors)
### Dataset splition
rawData = read.csv("./dat/Projectdata.csv")
trainData = rawData[c(1:(nrow(rawData)-28)),]
testData = rawData[c((nrow(rawData)-27):nrow(rawData)),]
ts_list = lapply(trainData[,2:ncol(rawData)], msts.beta)
arima_list = lapply(ts_list, auto.arima)
### calculate the devisors for RMSSE
devisors = unlist(lapply(trainData[,2:ncol(trainData)], cal.devisor))
arima_list = load(file="./arimalist/lst.RData")
pred_list = lapply(arima_list, forecast.beta)
View(arimax_list)
pred_list = lapply(arima_list, forecast.beta)
ts.beta = function(column){
output = ts(column,start = 1, frequency = 365.25)
return(output)
}
auto.arima.beta = function(column){
output = auto.arima(column, xreg = temp)
return(output)
}
ts365_list = lapply(trainData[,2:ncol(rawData)], ts.beta)
arimax_list = lapply(ts365_list, auto.arima.beta)
View(arimax_list)
forecastx.beta = function(model, h = 28){
output = forecast(model, level = c(95), h = h, xreg = temp.reg)
return(output)
}
predx_list = lapply(arimax_list, forecastx.beta)
arimax_RMSSE_v = eval.RMSSE(testData, predx_list, devisor = devisors)
View(eval.RMSSE)
View(eval.RMSSE)
rm(xreg)
rm(arima_list)
rm(hobby_ts_1)
View(pred_list)
View(predx_list)
load(file="./arimalist/lst.RData")
View(arima_list)
View(arimax_list)
View(pred_list)
View(predx_list)
arimax_RMSSE_v = eval.RMSSE(testData, pred_list = predx_list, devisor = devisors)
View(testData)
View(predx_list)
View(pred_list)
### calculate the RMSSE for all columns
arima_RMSSE_v = eval.RMSSE(testData, pred_list, devisor = devisors)
>>>>>>> Stashed changes
